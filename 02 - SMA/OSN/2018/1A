#include <bits/stdc++.h>
using namespace std;

//Define Lists
#define fi first
#define se second
#define pb push_back
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define OPTIMATION ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

//typedef Lists
typedef long long LL;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<pair<int,int> > vii;

//constant values
const double pi = acos(-1);
const LL MODPRIMA = (LL)1e9 + 7;
const LL MAXX = (LL)1e18;
const LL MINN = -(LL)1e18;
const double EPS = -1e9;

//declare variables here
const int MAXN = 1e5;
string s;
LL N, K;
LL H[MAXN+5], tmp;
LL baru[MAXN+5][3], lama[MAXN + 5][3], sisa;
LL ans, fak[MAXN+5];

void isi(){
  fak[0] = 1;
  for (int i = 1; i <= MAXN; i++) {
    fak[i] = (fak[i-1] * i)%MODPRIMA;
  }
}

int main(){
  OPTIMATION
  isi();
  cin >> s;
  cin >> N >> K;
  for (int i = 1; i <= K; i++) cin >> H[i];
  for (int i = 1; i <= N; i++) {
    cin >> tmp;
    if (i < H[tmp]) lama[tmp][0]++;
    else if (i == H[tmp]) lama[tmp][1]++;
    else lama[tmp][2]++;
  }
  for (int i = 1; i <= N; i++) {
    cin >> tmp;
    if (i < H[tmp]) baru[tmp][0]++;
    else if (i == H[tmp]) baru[tmp][1]++;
    else baru[tmp][2]++;
  }
  // for (int i = 1; i <= K; i++) {
  //   cout << lama[i][0] << " " << lama[i][1] << " " << lama[i][2] << '\n';
  //   cout << baru[i][0] << " " << baru[i][1] << " " << baru[i][2] << '\n';
  //   cout << '\n';
  // }
  ans = 1;
  for (int i = 1; i <= K; i++) {
    LL res = 0;
    if (lama[i][0] + lama[i][1] + lama[i][2] != baru[i][0] + baru[i][1] + baru[i][2]) {
      cout << 0 << '\n';
      return 0;
    }
    if (baru[i][1] == 1) {
      LL temp = 0;
      if (lama[i][0] > 0) {
        if (baru[i][2] <= lama[i][0] - 1 + lama[i][1]){
          if (baru[i][2] == lama[i][0] - 1) {
            temp = (1LL * (lama[i][0]) * (fak[baru[i][2]]))%MODPRIMA;
            temp = (temp * fak[baru[i][0]]) % MODPRIMA;
          }
          else if (baru[i][2] == lama[i][0] - 1 + lama[i][1]){
            temp = (1LL * (lama[i][0]) * (fak[baru[i][2]]))%MODPRIMA;
            temp = (temp * fak[baru[i][0]]) % MODPRIMA;
          }
          else temp = 0;
        }
        else temp = 0;
      } 
      res = (res + temp) % MODPRIMA;
      
      temp = 0;  
      if (lama[i][1] > 0) {
        if (lama[i][0] == baru[i][2]) {
          temp = (fak[baru[i][2]] * fak[baru[i][0]])%MODPRIMA;
        }
        else temp = 0;
      }
      res = (res + temp) % MODPRIMA;

      temp = 0;
      if (lama[i][2] > 0) {
        if (baru[i][0] <= lama[i][2] - 1 + lama[i][1]){
          if (baru[i][0] == lama[i][2] - 1) {
            temp = (1LL * (lama[i][2]) * (fak[baru[i][0]]))%MODPRIMA;
            temp = (temp * fak[baru[i][2]]) % MODPRIMA;
          }
          else if (baru[i][0] == lama[i][2] - 1 + lama[i][1]){
            temp = (1LL * (lama[i][2]) * (fak[baru[i][0]]))%MODPRIMA;
            temp = (temp * fak[baru[i][2]]) % MODPRIMA;
          }
          else temp = 0;
        }
        else temp = 0;
      }
      res = (res + temp) % MODPRIMA;
    }
    else {
      res = 1;
      if (baru[i][2] == lama[i][0]) {
        res = (res * fak[baru[i][2]]); res = (res * fak[baru[i][0]]) % MODPRIMA;
      }
      else if (baru[i][2] == lama[i][0] + lama[i][1]) {
        res = (res * fak[baru[i][2]]); res = (res * fak[baru[i][0]]) % MODPRIMA;
      } 
      else res = 0;
    }
    ans = ((ans%MODPRIMA) * (res%MODPRIMA)) % MODPRIMA;
  }
  cout << ans << '\n';
  return 0;
}