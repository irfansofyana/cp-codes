3 4 11
1 2 3 4

3 pekerjaan
tiap pekerjaan : 4 sub pekerjaan yg masing-masing waktunya 1, 2, 3, 4

pekerjaan 1 : (1, 2, 3, 4)
pekerjaan 2 : (1, 2, 3, 4)
pekerjaan 3 : (1, 2, 3, 4)

dia dapat mengerjakan sub pekerjaan dalam urutan yg bebas
11 dari mengerjakan subtask 1, 2, 3, 4 pada pekerjaan 1. total waktunya = 1+2+3+4 = 10 => 5 point
										1 nya didapat dari subtask 1 pekerjaan 2 => 1 point

misal, subtask nya 10, 9, 1, 3

ngerjain 1, 2, 3, 4 => full -> 4 + 1
				 1, 2, 3, 4 => full -> 4 + 1
				 1, 2, 3, 4 => full -> 4 + 1
				 total = 15
				 4 * 3 + 3 = 15

kalo ngerjain i secara full: 1*i + k*i = i*(k+1)

Ide ngerjain:
1. sort semua waktu untuk mengerjakan subtask secara menaik
2. Hitung jumlah waktu total untuk mengerjakan semua subtask. Misal ini total
3. Kalo misal M >= N*total => artinya dia bisa ngerjain semua tugas nya secara full 
	 Point yang dia dapatkan : N*K + N
4. Kalo M < N*total
	 Dia nggak bisa ngerjain semua
	 artinya harus beberapa doang yg bisa dikerjain full
	 disini kita bruteforce:
	 yang di brutefocenya adalah banyak pekerjaan yg dikerjakan secara full.
	 maksimal yg dikerjain secara full = M/total
	 i itu banyak pekerjaan yg dikerjakan secara full
	 for i = 0 sampai M/total :
	 	sisaWaktu = M - total*i
	 	point = i*(K+1) = i*k + i


5 5 10
1 2 4 8 16 => jumlah = 31
masing2 subtask itu ada 5
subtask1 -> 5
subtask2 -> 5
subtask3 -> 5
subtask4 -> 5
subtask5 -> 5

nggak ada yg bisa dikerjain full
sisaWaktu = 10
for 1 sampai 5: (1, 2, 4, 8, 16)
->sekarang ada di subtask1 :
	karena bisa berarti ambil semua (sisaWaktu = 10 - 1*5 = 5) dapet point : 5
->sekarang ada di subtask2 :
	kalo gabisa ambil semua, kamu ambil maksimalnya bisa ambil berapa
	kamu cuma bisa ambil 2 (sisaWaktu = 5 - 2*2 = 1) dapet point : 2
->sekarang ada di subtask3, subtask4, subtask5
	gabisa ambil apa2
point = 5+2 = 7






				
